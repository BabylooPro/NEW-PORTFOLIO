# INFO: THIS WORKFLOW IS USED TO TEST LOCAL BUILD AND DEPLOY CMS AND FRONTEND STACK USING NEKTOS/ACT IN A DOCKER CONTAINER
# VERSION: ACT 0.2.67 | DOCKER 27.2.0, build 3ab4256
# RUN: act -j deploy --secret-file .secrets -W ./.github/workflows/deploy-locally-act-nektos.yml --container-architecture linux/amd64

name: Deploy Full Stack Locally with Act

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (GitHub Actions local - nektos/act)"
        default: "local"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      GIT_HUB_ACCESS_TOKEN: ${{ secrets.GIT_HUB_ACCESS_TOKEN }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      WAKATIME_API_KEY: ${{ secrets.WAKATIME_API_KEY }}
      COUNTRY_STATE_CITY_API_KEY: ${{ secrets.COUNTRY_STATE_CITY_API_KEY }}
      STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
      STRAPI_API_URL: ${{ secrets.STRAPI_API_URL }}
      NEXT_PUBLIC_STRAPI_API_URL: ${{ secrets.NEXT_PUBLIC_STRAPI_API_URL }}
      APP_KEYS: ${{ secrets.APP_KEYS }}
      API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
      ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
      TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
      DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      HOST: ${{ secrets.HOST }}
      PORT: ${{ secrets.PORT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # CMS DEPLOYMENT
      - name: Cache CMS dependencies
        uses: actions/cache@v3
        with:
          path: cms/node_modules
          key: ${{ runner.os }}-cms-node_modules-${{ hashFiles('cms/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cms-node_modules-

      - name: Install CMS dependencies
        working-directory: cms
        run: npm install --legacy-peer-deps --force

      - name: Build CMS
        working-directory: cms
        run: npm run build

      - name: Start CMS locally
        working-directory: cms
        run: |
          npm install -g pm2
          pm2 describe cms > /dev/null && pm2 restart cms --update-env || pm2 start npm --name "cms" -- start --update-env
          pm2 save

      # FRONTEND DEPLOYMENT
      - name: Cache Frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-node_modules-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-node_modules-

      - name: Install Frontend dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps

      - name: Run Frontend unit tests
        working-directory: frontend
        run: npm test
        env:
          TEST_ENV: jsdom

      - name: Run Frontend integration tests
        working-directory: frontend
        run: npm run test:integration
        env:
          TEST_TYPE: integration
          TEST_ENV: node

      - name: Build Frontend
        working-directory: frontend
        run: |
          export NODE_OPTIONS="--max-old-space-size=3072"
          npm run build

      - name: Start Frontend locally
        working-directory: frontend
        run: |
          pm2 describe frontend > /dev/null && pm2 restart frontend --update-env || pm2 start npm --name "frontend" -- start --update-env
          pm2 save
