# INFO: THIS WORKFLOW IS USED TO TEST LOCAL BUILD AND DEPLOY CMS USING NEKTOS/ACT IN A DOCKER CONTAINER
# VERSION: ACT 0.2.67 | DOCKER 27.2.0, build 3ab4256
# RUN: act -j deploy --secret-file .secrets -W ./.github/workflows/deploy-cms-local-act.yml --container-architecture linux/amd64

name: Deploy CMS Locally with Act

on:
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to deploy (GitHub Actions local - nektos/act)"
                default: "local"
                required: true

jobs:
    deploy:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: cms
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: cms/node_modules
                  key: ${{ runner.os }}-node_modules-${{ hashFiles('cms/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node_modules-

            - name: Install dependencies
              run: npm install --legacy-peer-deps --force
              env:
                  HOST: ${{ secrets.HOST }}
                  PORT: ${{ secrets.PORT }}
                  APP_KEYS: ${{ secrets.APP_KEYS }}
                  API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
                  ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
                  TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
                  DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
                  JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
                  STRAPI_API_URL: ${{ secrets.STRAPI_API_URL }}

            - name: Build project
              run: npm run build
              env:
                  HOST: ${{ secrets.HOST }}
                  PORT: ${{ secrets.PORT }}
                  APP_KEYS: ${{ secrets.APP_KEYS }}
                  API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
                  ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
                  TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
                  DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
                  JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
                  STRAPI_API_URL: ${{ secrets.STRAPI_API_URL }}

            - name: Install PM2
              run: npm install -g pm2

            - name: Start CMS locally
              run: |
                  pm2 describe cms > /dev/null && pm2 restart cms --update-env || pm2 start npm --name "cms" -- start --update-env
                  pm2 save
              env:
                  HOST: ${{ secrets.HOST }}
                  PORT: ${{ secrets.PORT }}
                  APP_KEYS: ${{ secrets.APP_KEYS }}
                  API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
                  ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
                  TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
                  DATABASE_CLIENT: ${{ secrets.DATABASE_CLIENT }}
                  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
                  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
                  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
                  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
                  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_SSL: ${{ secrets.DATABASE_SSL }}
                  JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
                  STRAPI_API_URL: ${{ secrets.STRAPI_API_URL }}
